swagger: '2.0'
info:
  description: |
    This is the CrowdShelf API.
  version: 2.0.1
  title: CrowsShelf API
  contact:
    url: 'www.github.com/crowdshelf'
    name: 'http://www.github.crowdshelf.io'
host: crowdshelf.herokuapp.com
basePath: /api
schemes:
  - http
paths:
  /books:
    get:
      tags:
        - books
      summary: Get all or an assortment of books
      description: 'Use optional queries to refine your search'
      operationId: getBooks
      produces:
        - application/json
      parameters:
        - in: query
          name: isbn
          description: Get all books with the given ISBN
          required: false
          type: string
        - in: query
          name: owner
          description: Get all books owned by the given user ID
          required: false
          type: string
        - in: query
          name: rentedTo
          description: Get all books rented by the given user ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '999':
          description: Not found (no results from query)
    put:
      tags:
        - books
      summary: Add a new book or change an existing one
      description: ''
      operationId: addBook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Book object to be added or changed
          required: true
          schema:
            $ref: '#/definitions/Book'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Book'
        '409':
          description: Conflict with another book
        '422':
          description: Unprocessable entity. Something missing or something's wrong in the data given.
    
  '/books/{bookID}':
    get:
      tags:
        - books
      summary: Get book by ID
      description: ''
      operationId: getBookByID
      produces:
        - application/json
      parameters:
        - in: path
          name: bookID
          description: Book ID
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Book'
        '404':
          description: Not found
  '/books/{bookID}/renter':
    get:
      tags:
        - books
        - users
      summary: Get the renter of a book
      description: ''
      operationId: getRenter
      produces:
        - application/json
      parameters:
        - in: path
          name: bookID
          description: Book ID
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: Book not found
  '/books/{bookID}/renter/{userID}':
    put:
      tags:
        - books
        - users
      summary: Add a renter to a book
      description: ''
      operationId: addRenter
      parameters:
        - in: path
          name: bookID
          description: ID of book to add renter to
          required: true
          type: string
        - in: path
          name: userID
          description: ID of user to be added as a renter
          required: true
          type: string
      responses:
        '200':
          description: OK
        '409':
          description: Conflict
        '422':
          description: Unprocessable entity. Something missing or something's wrong in the data given.
    delete:
      tags:
        - books
        - users
      summary: Remove a renter from a book
      description: ''
      operationId: removeRenter
      parameters:
        - in: path
          name: bookID
          description: ID of book to remove renter from
          required: true
          type: string
        - in: path
          name: userID
          description: ID of user to be removed as a renter
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: That bookId or renter is not found.
        '422':
          description: Unprocessable entity. Something missing or something's wrong in the data given.
  /crowds:
    get:
      tags:
        - crowds
      summary: Get all crowds
      description: ''
      operationId: getCrowds
      produces:
        - application/json
      parameters:
        - in: query
          name: member
          description: Get the crowds which the given user ID is a member of
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Crowd'
        '404':
          description: No crowds
    post:
      tags:
        - crowds
      summary: Create a new crowd
      description: ''
      operationId: createCrowd
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Crowd to be created
          required: true
          schema:
            $ref: '#/definitions/Crowd'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Crowd'
        '409':
          description: 'Conflict: Crowd name already in use'
        '422':
          description: 'Unprocessable entity: Something wrong with form data'

  '/crowds/{crowdID}':
    get:
      tags:
        - crowds
      summary: Get crowd by ID
      description: ''
      operationId: getCrowd
      produces:
        - application/json
      parameters:
        - in: path
          name: crowdID
          description: ID of crowd to get
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Crowd'
        '404':
          description: Not found
    delete:
      tags:
        - crowds
      summary: Delete crowd by ID
      description: ''
      operationId: deleteCrowd
      parameters:
        - in: path
          name: crowdID
          description: ID of the crowd to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: Crowd not found
        '550':
          description: Permission denied. You need to be owner.
  '/crowds/{crowdID}/members/{userID}':
    put:
      tags:
        - crowds
        - users
      summary: Add a member to a crowd
      description: ''
      operationId: addMember
      parameters:
        - in: path
          name: crowdID
          description: ID of crowd to add a member to
          required: true
          type: string
        - in: path
          name: userID
          description: ID of user to add as member
          required: true
          type: string
      responses:
        '200':
          description: OK
        '409':
          description: asdsda
    delete:
      tags:
        - crowds
        - users
      summary: Remove a member from a crowd
      description: ''
      operationId: removeMember
      parameters:
        - in: path
          name: crowdID
          description: ID of crowd to remove a member from
          required: true
          type: string
        - in: path
          name: userID
          description: ID of user to remove as member
          required: true
          type: string
      responses:
        '200':
          description: OK
        '409':
          description: dasdasdad
        '550':
          description: Permission denied. 
  /users:
    get:
      tags:
        - users
      summary: Get users
      description: ''
      operationId: getUsers
      produces:
        - application/json
      parameters:
        - in: query
          name: name
          description: Get users with the given name
          required: false
          type: string
        - in: query
          name: email
          description: Get user with the given email
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: No users
    post:
      tags:
        - users
      summary: Create user
      description: ''
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object to create
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK

  '/users/{userID}':
    get:
      tags:
        - users
      summary: Get user with the given ID
      description: ''
      operationId: getUser
      produces:
        - application/json
      parameters:
        - in: path
          name: userID
          description: ID of user to get.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
definitions:
  User:
    type: object
    properties:
      _rev:
        type: string
      _id:
        type: string
      username:
        type: string
      email:
        type: string
  Book:
    type: object
    properties:
      _rev:
        type: string
      _id:
        type: string
      isbn:
        type: string
      owner:
        type: string
      rentedTo:
        type: string
        description: 'user ID'
  Crowd:
    description: description
    type: object
    properties:
      _rev:
        type: string
      _id:
        type: string
      name:
        type: string
      owner:
        type: string
        description: 'user ID'
      members:
        type: array
        items:
          type: string
          description: 'user ID'